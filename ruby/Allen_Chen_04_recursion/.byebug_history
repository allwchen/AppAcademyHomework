exit
[].concat([[2,1],[1,2]])
[] << [[2,1],[1,2]]
intersperse_array(2, [1])
array_perms
array_perms.each { |subarray| print subarray }
array_perms.each do |subarray|
array_perms
array_rest
last_el
exit
self
subsets()
subsets([])
[[]].empty?
[].empty?
[]
last
take(1)
take(0)
count
c
array
c
array
finish
s
array
s
array
array.length
s
array.empty?
array
c
array
c
cc
c
array
c
s
c
s
display arr_subset
display new_arr
display subset_perms
display array_rest
display first_el
exit
ls
help ls
c
display subset_perms
c
s
c
s
arr_subset
s
list
display array_subsets
array_subsets
s
array
s
c
n
array_subsets
n
c
s
display new_arr
new_arr
array_subsets
n
display array_rest
display first_el
exit
load "recursion.rb"
    return mid
  if target == array[mid]
  mid = array.length/2
  return nil if array.length == 0
def bsearch(array, target)
  end
    bsearch(array[0...mid], target)
  else
    mid + 1 + bsearch(array[mid+1..-1], target)
  elsif array[mid] < target
    return mid
  if target == array[mid]
  debugger
  mid = array.length/2
  return nil if array.length == 0 
def bsearch(array, target)
end
  end
    bsearch(array[0...mid], target)
  else
    mid + 1 + bsearch(array[mid+1..-1], target)
  elsif array[mid] < target
    return mid
  if target == array[mid]
  debugger
  mid = array.length/2
  return nil if array.length == 0 
def bsearch(array, target)
c
quit
array[0...mid]
array[mid]<target
array[mid]
mid
array
target
n
exit
n
list
display i
i
display n
show i
show n
s
show n
c
n
list
