c
blk.call
blk
exit
c
s
prc.call(self[i])
s
display arr
arr
s
arr
s
prc.call(self[i])
display self[i]
display i
self[i]
i
prc.call
self
c
self
c
self
c
self
c
self
exit
c
yield
prc.call
prc
exit
c
exit
c
exit
self[idx+1]
num
blk.call(num,self[idx+1])
blk.call(num,idx)
blk.call(num)
blk.call
blk
block_given?
c
arr
display self
c
s
block_given?
c
proc.call
proc
prc
&prc
blk.call==nil
blk
blk.call
blk
c
display self
c
self
c
self
c
self
exit
@eleven_am
:now
elapsed_time
Time.parse
Time
fake_time
time
c
s
blk.call
c
display blk.call
c
s
display blk.call
c
return nil
nil
blk.call
blk
c
s
c
blk.call.split.map{|el| el.reverse}.join(" ")
blk.call.split.map{|el| el.reverse}
blk.call.split
blk.call
blk
c
s
blk.call.reverse
blk.call
c
blk.call
&blk:blk
&blk
blk
